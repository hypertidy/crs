usethis::use_gpl3_license()
library(sf)
example(st_sf)
h
attr(h, "sf_column")
attr(h, "sf_column")
h[[attr(h, "sf_column")]]
class(h[[attr(h, "sf_column")]])
str(h)
str(h[[attr(h, "sf_column")]])
unclass(h[[attr(h, "sf_column")]])
unclass(h$pol)
h$pol[[1]]
class(h$pol[[1]])
raster::projection
silicate:::get_projection
silicate:::get_projection.default
silicate:::get_projection.sc
silicate:::get_projection.Spatial
library(crs)
isS4
?iisS4
?isS4
methods::hasSlot
methods::slot(r, "crs")
r <- raster::raster()
methods::slot(r, "crs")
methods::slot(r, "proj4string")
?slot
x@crs
r@crs
class(r@crs)
slotNames(r@crs)
x <- r
methods::.hasSlot(x, "crs")
x <- x@crs
x
methods::.hasSlot(x, "projargs")
x@projargs@projstring
x@projargs@proj4string
x@projargs
x <- r
methods::.hasSlot(x, "crs")
x <- x@crs
methods::.hasSlot(x, "projargs")
comment(x)
projection(x) <- sp::CRS(projection(x))
raster::projection(x) <- sp::CRS(raster::projection(x))
raster::projection(x) <- sp::CRS(raster::projection(x))
raster::projection(x)
sp::CRS(raster::projection(x))
x <-  sp::CRS(raster::projection(x))
x
comment(x)
library(help = sp)
remotes::install_github("rsbivand@sp")
remotes::install_github("rsbivand/sp")
x <- raster::raster()
x@crs
comment(x@crs)
spex::spex(x)
spex::spex(x)@proj4string
comment(spex::spex(x)@proj4string)
CRS("+proj=longlat")
sp::CRS("+proj=longlat")
comment(sp::CRS("+proj=longlat"))
SpatialPoints(cbind(0, 0), proj4string = sp::CRS("+proj=longlat"))
sp::SpatialPoints(cbind(0, 0), proj4string = sp::CRS("+proj=longlat"))
comment(sp::SpatialPoints(cbind(0, 0), proj4string = sp::CRS("+proj=longlat")))
a <- sp::SpatialPoints(cbind(0, 0), proj4string = sp::CRS("+proj=longlat"))
slotNames(a)
a@coords
comment(a@coords)
comment(a@proj4string)
sp::CRS("+proj=longlat")
str(sp::CRS("+proj=longlat"))
?rgeos::checkP4S
sf::st_crs(4326)
sf::st_sfc(sf::st_point(cbind(0, 0)), sf::st_crs(4326))
sf::st_sfc(sf::st_point(cbind(0, 0)), crs = sf::st_crs(4326))
str(sf::st_sfc(sf::st_point(cbind(0, 0)), crs = sf::st_crs(4326)))
base::str(sf::st_sfc(sf::st_point(cbind(0, 0)), crs = sf::st_crs(4326)))
str
utils::str(sf::st_sfc(sf::st_point(cbind(0, 0)), crs = sf::st_crs(4326)))
utils:::str.default(sf::st_sfc(sf::st_point(cbind(0, 0)), crs = sf::st_crs(4326)))
utils:::str.data.frame(data.frame(x = 1))
?str
utils:::str.default(data.frame(x = 1))
str(data.frame(x = 1))
str(sf::st_sfc(sf::st_point(cbind(0, 0)), crs = sf::st_crs(4326)))
utils:::str.default(data.frame(x = 1))
utils:::str.default(data.frame(x = 1))
utils:::str.default(data.frame(x = 1))
unclass(data.frame(x = 1))
str(unclass(data.frame(x = 1)))
sf:::str.ssf::st_sfc(sf::st_point(cbind(0, 0)), crs = sf::st_crs(4326))
sf::st_sfc(sf::st_point(cbind(0, 0)), crs = sf::st_crs(4326))
remotes::install_github("rforge/rgdal/pkg")
library(rgdal)
?readOGR
dsn <- system.file("vectors", package = "rgdal")[1]
x <- readOGR(dsn)
x@proj4string
comment(x@proj4string)
sf::st_crs(x@proj4string)
unclass(sf::st_crs(x@proj4string))
str(sf::st_crs(x@proj4string))
comment(sf::st_crs(x@proj4string))
library(crs)
get_proj(x)
devtools::load_all(".")
get_proj(x)
x
x
methods::.hasSlot(x, "crs")
devtools::load_all(".")
get_proj(x)
methods::.hasSlot(x, "projargs")
x@proj4string
x@proj4string@projargs
devtools::load_all(".")
get_proj(x)
get_crs(x)
get_wkt(x)
devtools::load_all(".")
get_wkt(x)
devtools::load_all(".")
get_wkt(x)
x@proj4string
comment(x@proj4string)
devtools::load_all(".")
get_wkt(x)
devtools::load_all(".")
get_wkt(x)
SOmap_auto(bathyleg=TRUE)
x
sf::st_as_sf(x)
sf::make_crs(sf::st_as_sf(x))
sf:::make_crs(sf::st_as_sf(x))
sf:::make_crs(sf::st_crs(sf::st_as_sf(x)))
sf:::make_crs(sf::st_crs(sf::st_as_sf(x)), wkt = T)
sf:::make_crs(sf::st_crs(sf::st_as_sf(x))$projstring, wkt = T)
sf:::make_crs(sf::st_crs(sf::st_as_sf(x))$proj4string, wkt = T)
sf::st_crs(sf::st_as_sf(x))$proj4string
devtools::load_all(".")
get_crs(x)
devtools::load_all(".")
get_crs(x)
get_proj(x)
sf::st_crs(4326)
unclass(sf::st_crs(4326))
devtools::load_all(".")
library(crs)
usethis::use_test("crs")
raster::raster()
testthat::skip_on_cran
library(sf)
x <- sf::read_sf(system.file("gpkg/nc.gpkg", package = "sf"))
get_proj(x)
devtools::load_all(".")
get_proj(x)
is.character(crs_proj(r))
r <- raster::raster()
is.character(crs_proj(r))
!is.na(crs_proj(r))
x <- sf::read_sf(system.file("gpkg/nc.gpkg", package = "sf"))
is.character(crs_proj(x))
!is.na(crs_proj(x))
is.character(crs_proj(x))
!is.na(crs_proj(x))
is.character(crs_epgs(x))
library(help = sp)
library(help = rgdal)
utils::packageVersion("rgdal")
utils::packageVersion("rgdal") < "1.5-3"
x <- rgdal::readOGR(system.file("gpkg/nc.gpkg", package = "sf"))
x@proj4string
comment(x@proj4string)
x
x <- sf::read_sf(system.file("gpkg/nc.gpkg", package = "sf"))
library(testthat)
expect_true(is.character(crs_proj(x$geom)))
crs_proj(x$geom)
x$geom
methods::.hasSlot(x, "crs")
inherits(x, "sfc")
methods::.hasSlot(x$geom, "crs")
x$geom
isS4
devtools::load_all(".")
expect_true(is.character(crs_proj(x$geom)))
usethis::use_package("methods")
usethis::use_readme_rmd()
usethis::use_code_of_conduct()
sfx <- spex::polygonize(r)
crs_wkt(sfx)
crs_epsg(sfx)
library(crs)
library(raster)
## a spatial object
r <- raster::raster()
r[100] <- 10
crs_proj(r)
library(crs)
library(raster)
## a spatial object
r <- raster::raster()
r[100] <- 10
crs_proj(r)
sfx <- spex::polygonize(r)
library(crs)
library(raster)
## a spatial object
r <- raster::raster()
r[100] <- 10
crs_proj(r)
sfx <- spex::polygonize(r)
r
r[50:51] <- 10
sfx <- spex::polygonize(r)
crs_wkt(sfx)
crs_epsg(sfx)
sfx <- sf::read_sf(system.file("gpkg/nc.gpkg", package = "sf", mustWork = TRUE))
crs_wkt(sfx)
crs_epsg(sfx)
crs_wkt(as(sfx, "Spatial"))
writeLines(crs_wkt(as(sfx, "Spatial")))
cat(crs_wkt(as(sfx, "Spatial")))
sfx <- sf::read_sf(system.file("gpkg/nc.gpkg", package = "sf", mustWork = TRUE))
crs_wkt(as(sfx, "Spatial"))
crs_epsg(sfx)
library(crs)
crs_proj(silicate::minimal_mesh)
crs_proj(silicate::inlandwaters)
silicate::inlandwaters
silicate::polymesh
silicate::mmesh
crs_proj(silicate::SC0(silicate::inlandwaters))
remotes::install_github("r-spatial/sf")
sf::st_crs(4326)
str(sf::st_crs(4326))
remotes::install_github("r-spatial/sf@wkt2")
str(sf::st_crs(4326))
structure(list(item = 1), class = "thing")
methods::.hasSlot(x, "item")
x <- structure(list(item = 1), class = "thing")
methods::.hasSlot(x, "item")
x <- structure(1, item = "y", class = "t")
methods::.hasSlot(x, "item")
x <- structure(1, item = "y", class = "t")
## yikes
methods::.hasSlot(x, "item")
## ftw
isS4(x) && methods::.hasSlot(x, "item")
?isS4
sessionInfo()
sessionInfo()
?.hasSlot
structure(1)[["item"]]
structure(list(1))[["item"]]
library(crs)
available::available("crs")
available::available("crsmeta")
library(crsmeta)
